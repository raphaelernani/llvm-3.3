##=== TEST.nightly.report - Report description for nightly -----*- perl -*-===##
#
# This file defines a report to be generated for the nightly tests.
#
##===----------------------------------------------------------------------===##

# Sort by program name
$SortCol = 0;
$TrimRepeatedPrefix = 1;

my $WallTimeRE = "Time: ([0-9.]+) seconds \\([0-9.]+ wall clock";

# FormatTime - Convert a time from 1m23.45 into 83.45
sub FormatTime {
  my $Time = shift;
  if ($Time =~ m/([0-9]+)[m:]([0-9.]+)/) {
    return sprintf("%7.4f", $1*60.0+$2);
  }

  return sprintf("%7.4f", $Time);
}

sub GCCLLCRatio {
  my ($Cols, $Col) = @_;
  my $GCC = $Cols->[$Col-7];
  my $LLC = $Cols->[$Col-5];
  return "n/a" if ($GCC eq "*" or $LLC eq "*");
  return sprintf("%3.2f", $GCC/$LLC) if ($GCC >= 0.1 and $LLC >= 0.1);
  return "-";
}

sub GCCLLC_BETARatio {
  my ($Cols, $Col) = @_;
  my $GCC = $Cols->[$Col-8];
  my $LLC_BETA = $Cols->[$Col-5];
  return "n/a" if ($GCC eq "*" or $LLC_BETA eq "*");
  return sprintf("%3.2f", $GCC/$LLC_BETA) if ($GCC >= 0.1 and $LLC_BETA >= 0.1);
  return "-";
}

sub LLCLLC_BETARatio {   # LLC/LLC-BETA
  my ($Cols, $Col) = @_;
  my $LLC = $Cols->[$Col-7];
  my $LLC_BETA = $Cols->[$Col-6];
  return "n/a" if ($LLC eq "*" or $LLC_BETA eq "*");
  return sprintf("%3.2f", $LLC/$LLC_BETA) if ($LLC >= 0.1 and $LLC_BETA >= 0.1);
  return "-";
}

sub INSTNATRatio {   # INST/NAT
  my ($Cols, $Col) = @_;
  my $INST = $Cols->[$Col-3];
  my $NAT = $Cols->[$Col-5];
  return "n/a" if ($INST eq "*" or $NAT eq "*");
  return sprintf("%3.4f", $INST/$NAT) if ($INST >= 0.001 and $NAT >= 0.001);
  return "-";
}

sub INSTLLCRatio {   # INST/LLC
  my ($Cols, $Col) = @_;
  my $INST = $Cols->[$Col-2];
  my $LLC = $Cols->[$Col-3];
  return "n/a" if ($LLC eq "*" or $INST eq "*");
  return sprintf("%3.4f", $INST/$LLC) if ($INST >= 0.001 and $LLC >= 0.001);
  return "-";
}

# highlight the RATIO columns with green/red.
$HilightColumns{8} = 1;
$HilightColumns{9} = 1;

# These are the columns for the report.  The first entry is the header for the
# column, the second is the regex to use to match the value.  Empty list create
# separators, and closures may be put in for custom processing.
(
# Name
 ["Program"  , '\'([^\']+)\' Program'],
 [],
# TripCountGenerator
 ["NumVectorEstimatedTCs"           , '([0-9]+).*Number of Estimated Trip Counts by Vector'],
 ["NumPericlesEstimatedTCs"         , '([0-9]+).*Number of Estimated Trip Counts by Pericles'],
 ["NumIntervalLoops"                , '([0-9]+).*Number of Interval Loops'],
 ["NumEqualityLoops"                , '([0-9]+).*Number of Equality Loops'], 
 ["NumOtherLoops"                   , '([0-9]+).*Number of Other Loops'],
 [],
 ["NumUnknownConditionsIL"          , '([0-9]+).*Number of Interval Loops With Unknown TripCount'],
 ["NumUnknownConditionsEL"          , '([0-9]+).*Number of Equality Loops With Unknown TripCount'], 
 ["NumUnknownConditionsOL"          , '([0-9]+).*Number of Other Loops With Unknown TripCount'],
 ["NumIncompatibleOperandTypes"     , '([0-9]+).*Number of Loop Conditions With non-integer Operands'],
 [], 
# TripCountProfiler
 ["NumInstrumentedLoops"            , '([0-9]+).*Number of Instrumented Loops'], 
 ["NumIgnoredLoops"                 , '([0-9]+).*Number of Ignored Loops'],
 ["NumUnknownTripCount"             , '([0-9]+).*Number of Unknown Estimated Trip Count'],
 [],  
# Accuracy - NumLoops
 ["NumLoops - IL UNK"               , 'NumLoops \(Interval Loops, Unknown\)\s*([0-9]+)'],
 ["NumLoops - IL G0"                , 'NumLoops \(Interval Loops, Group 0\)\s*([0-9]+)'],
 ["NumLoops - IL G1"                , 'NumLoops \(Interval Loops, Group 1\)\s*([0-9]+)'],
 ["NumLoops - IL G2"                , 'NumLoops \(Interval Loops, Group 2\)\s*([0-9]+)'],
 ["NumLoops - IL G3"                , 'NumLoops \(Interval Loops, Group 3\)\s*([0-9]+)'],
 ["NumLoops - IL G4"                , 'NumLoops \(Interval Loops, Group 4\)\s*([0-9]+)'],
 ["NumLoops - IL G5"                , 'NumLoops \(Interval Loops, Group 5\)\s*([0-9]+)'],
 ["NumLoops - IL G6"                , 'NumLoops \(Interval Loops, Group 6\)\s*([0-9]+)'],      
 ["NumLoops - EL UNK"               , 'NumLoops \(Equality Loops, Unknown\)\s*([0-9]+)'],
 ["NumLoops - EL G0"                , 'NumLoops \(Equality Loops, Group 0\)\s*([0-9]+)'],
 ["NumLoops - EL G1"                , 'NumLoops \(Equality Loops, Group 1\)\s*([0-9]+)'],
 ["NumLoops - EL G2"                , 'NumLoops \(Equality Loops, Group 2\)\s*([0-9]+)'],
 ["NumLoops - EL G3"                , 'NumLoops \(Equality Loops, Group 3\)\s*([0-9]+)'],
 ["NumLoops - EL G4"                , 'NumLoops \(Equality Loops, Group 4\)\s*([0-9]+)'],
 ["NumLoops - EL G5"                , 'NumLoops \(Equality Loops, Group 5\)\s*([0-9]+)'],
 ["NumLoops - EL G6"                , 'NumLoops \(Equality Loops, Group 6\)\s*([0-9]+)'], 
 ["NumLoops - OL G0"                , 'NumLoops \(Other Loops, Group 0\)\s*([0-9]+)'],
 ["NumLoops - OL G1"                , 'NumLoops \(Other Loops, Group 1\)\s*([0-9]+)'],
 ["NumLoops - OL G2"                , 'NumLoops \(Other Loops, Group 2\)\s*([0-9]+)'],
 ["NumLoops - OL G3"                , 'NumLoops \(Other Loops, Group 3\)\s*([0-9]+)'],
 ["NumLoops - OL G4"                , 'NumLoops \(Other Loops, Group 4\)\s*([0-9]+)'],
 ["NumLoops - OL G5"                , 'NumLoops \(Other Loops, Group 5\)\s*([0-9]+)'],
 ["NumLoops - OL G6"                , 'NumLoops \(Other Loops, Group 6\)\s*([0-9]+)'], 
 ["NumLoops - All"                  , 'NumLoops \(All Loops\)\s*([.0-9]+)'],
 [],  
# Accuracy - NumInstances
 ["NumInstances - IL UNK"               , 'NumInstances \(Interval Loops, Unknown\)\s*([0-9]+)'],
 ["NumInstances - IL G0"                , 'NumInstances \(Interval Loops, Group 0\)\s*([0-9]+)'],
 ["NumInstances - IL G1"                , 'NumInstances \(Interval Loops, Group 1\)\s*([0-9]+)'],
 ["NumInstances - IL G2"                , 'NumInstances \(Interval Loops, Group 2\)\s*([0-9]+)'],
 ["NumInstances - IL G3"                , 'NumInstances \(Interval Loops, Group 3\)\s*([0-9]+)'],
 ["NumInstances - IL G4"                , 'NumInstances \(Interval Loops, Group 4\)\s*([0-9]+)'],
 ["NumInstances - IL G5"                , 'NumInstances \(Interval Loops, Group 5\)\s*([0-9]+)'],
 ["NumInstances - IL G6"                , 'NumInstances \(Interval Loops, Group 6\)\s*([0-9]+)'],      
 ["NumInstances - EL UNK"               , 'NumInstances \(Equality Loops, Unknown\)\s*([0-9]+)'],
 ["NumInstances - EL G0"                , 'NumInstances \(Equality Loops, Group 0\)\s*([0-9]+)'],
 ["NumInstances - EL G1"                , 'NumInstances \(Equality Loops, Group 1\)\s*([0-9]+)'],
 ["NumInstances - EL G2"                , 'NumInstances \(Equality Loops, Group 2\)\s*([0-9]+)'],
 ["NumInstances - EL G3"                , 'NumInstances \(Equality Loops, Group 3\)\s*([0-9]+)'],
 ["NumInstances - EL G4"                , 'NumInstances \(Equality Loops, Group 4\)\s*([0-9]+)'],
 ["NumInstances - EL G5"                , 'NumInstances \(Equality Loops, Group 5\)\s*([0-9]+)'],
 ["NumInstances - EL G6"                , 'NumInstances \(Equality Loops, Group 6\)\s*([0-9]+)'], 
 ["NumInstances - OL G0"                , 'NumInstances \(Other Loops, Group 0\)\s*([0-9]+)'],
 ["NumInstances - OL G1"                , 'NumInstances \(Other Loops, Group 1\)\s*([0-9]+)'],
 ["NumInstances - OL G2"                , 'NumInstances \(Other Loops, Group 2\)\s*([0-9]+)'],
 ["NumInstances - OL G3"                , 'NumInstances \(Other Loops, Group 3\)\s*([0-9]+)'],
 ["NumInstances - OL G4"                , 'NumInstances \(Other Loops, Group 4\)\s*([0-9]+)'],
 ["NumInstances - OL G5"                , 'NumInstances \(Other Loops, Group 5\)\s*([0-9]+)'],
 ["NumInstances - OL G6"                , 'NumInstances \(Other Loops, Group 6\)\s*([0-9]+)'], 
 ["NumInstances - All"                  , 'NumInstances \(All Loops\)\s*([.0-9]+)'], 
);
